//+build ignore

package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/filecoin-project/chain-validation/chain"
)

const blob = "blob.go"

var packageTemplate = template.Must(template.New("").Funcs(map[string]interface{}{"conv": ToGoSyntax, "typeString": ToContainerType}).Parse(`// Code generated by go generate; DO NOT EDIT.
// generated using files from resources directory
package box

import (
	"github.com/filecoin-project/specs-actors/actors/abi"

	"github.com/filecoin-project/chain-validation/chain"
	"github.com/filecoin-project/chain-validation/chain/types"
)

func init(){
	{{- range $name, $file := . }}
    	resources.Add("{{ $name }}", {{ typeString $file }}{ {{ conv $file }} })
	{{- end }}
}
`))

func ToContainerType(value []interface{}) string {
	// there are no mixed types in the slice so just look at the first one in the list
	if code, ok := value[0].(chain.Trackable); ok {
		return code.GoContainer()
	}
	log.Fatalf(fmt.Sprintf("ToContainerType Unknown Type: %T", value))
	return "unreachable"
}

func ToGoSyntax(values []interface{}) string {
	builder := strings.Builder{}
	for _, value := range values {
		if code, ok := value.(chain.Trackable); ok {
			builder.WriteString(fmt.Sprintf("%s,", code.GoSyntax()))
		} else {
			log.Fatalf("Object does not implement goSyntaxable: %#v", value)
		}
	}
	return builder.String()
}

func main() {
	log.Println("Baking resources... \U0001F4E6")

	if _, err := os.Stat("resources"); os.IsNotExist(err) {
		log.Fatal("Resources directory does not exists")
	}

	resources := make(map[string][]interface{})
	err := filepath.Walk("resources", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			log.Println("Error :", err)
			return err
		}
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, "resources"))
		if info.IsDir() {
			log.Println(path, "is a directory, skipping... \U0001F47B")
			return nil
		} else {
			log.Println(path, "is a file, baking in... \U0001F31F")
			f, err := os.Open(path)
			if err != nil {
				return err
			}
			scanner := bufio.NewScanner(f)
			for scanner.Scan() {
				// hacky, if a test name is changed this will break. PR's welcome :)
				if strings.Contains(f.Name(), "TipSet") {
					var applytsres chain.ApplyTipSetResult
					if err := json.Unmarshal(scanner.Bytes(), &applytsres); err != nil {
						panic(err)
					}
					resources[relativePath] = append(resources[relativePath], applytsres)
				} else {
					var applymsgres chain.ApplyMessageResult
					if err := json.Unmarshal(scanner.Bytes(), &applymsgres); err != nil {
						panic(err)
					}
					resources[relativePath] = append(resources[relativePath], applymsgres)
				}
			}

		}
		return nil
	})
	if err != nil {
		log.Fatal("Error walking through resources directory:", err)
	}

	f, err := os.Create(blob)
	if err != nil {
		log.Fatal("Error creating blob file:", err)
	}
	defer f.Close()

	builder := &bytes.Buffer{}

	err = packageTemplate.Execute(builder, resources)
	if err != nil {
		log.Fatal("Error executing template", err)
	}

	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}
	err = ioutil.WriteFile(blob, data, os.ModePerm)
	if err != nil {
		log.Fatal("Error writing blob file", err)
	}

	log.Println("Baking resources done... \U0001F680")
}
